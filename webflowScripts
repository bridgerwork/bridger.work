<script>

  /**
	* Vary the background color based on the mouse position
  */
  //get the body
  const body = document.body;
  let bodyStyles = window.getComputedStyle(body);
  
  const icons = document.querySelectorAll('.icon');
  let numIcons = icons.length;
  
  // let us know which theme we're dealing with
  let theme = 1;
  const blobs = document.querySelectorAll('.blob');
  let numBlobs = blobs.length;
  // increment the theme when the blob is clicked
  // will only register a click for visible blob
  for (i=0; i < numBlobs; i++) {
    let blob = blobs[i];
	// let blobStyles = window.getComputedStyle(blob);
	// let blobDisplay = blobStyles.getPropertyValue('display');
	// console.log(`${blob.className} \n display: ${blobDisplay}`);
	blob.addEventListener('mousedown', e => {
    setTimeout(function() {
      theme++;
      theme = theme%numBlobs;
		}, 500);
    let iconFill = (theme === 0) ? '#ffffff' : '#1a1a1a';
    for (i = 0; i < numIcons; i++) {
    	let icon = icons[i];
      icon.setAttribute('fill', iconFill);
    }
	});
  }
  
  // get window dimensions and set scales for horizontal and vertical
  let width = document.documentElement.clientWidth;
  let height = document.documentElement.clientHeight;
  let xScale = createRemap(0, width, 0, 100);
  let yScale = createRemap(0, height, 0, 100);

  // change scales on window resize
  window.addEventListener('resize', e => {
    width = document.documentElement.clientWidth;
    height = document.documentElement.clientHeight;
    // console.log(`w: ${width}, h: ${height}`);
    xScale = createRemap(0, width, 0, 100);
    yScale = createRemap(0, height, 0, 100);
  });
  
  //vary the background color based on the theme
	let bgH, bgS, bgL;
	let xVal, yVal;
  	let textStyle = "";
  	let svgStrokeStyle = "";
  	let svgFillStyle = "";
//   console.log(`(${xVal}, ${yVal})`);
    switch (theme) {
      case 0: //Yellow
        initH = 45, initS = 100, initL = 54;
        textStyle = svgStyle = 'color: #1a1a1a';
        break;
      case 1: //Black
        initH = 0, initS = 0, initL = 10;
        textStyle = `color: white;`;
        svgFillStyle = `fill: white;`;
        break;
      case 2: //Blue
        initH = 197, initS = 100, initL = 53;
        textStyle = svgStyle = 'color: #1a1a1a';        
        break;
      default:
      case 3: //White
        initH = 151, initS = 100, initL = 98;
        textStyle = svgStyle = 'color: #1a1a1a';
        break;
    }
    
  window.addEventListener('mousemove', e => {
	// console.log(`x: ${e.pageX}, y: ${e.pageY}`);
	xVal = xScale(e.pageX);
	yVal = yScale(e.pageY);
    bgH = Math.max(initH, 5) + (xVal-50)/10;
    bgS = initS;
    bgL = initL + (50-yVal)/20;
    bgStyle += ` background-color: hsl(${bgH}, ${bgS}%, ${bgL}%);`;
    newstyles = `${bgStyle} ${textStyle}`;
    body.setAttribute('style', newStyles);
//     console.log(body.getAttribute('style'));
  });

  /**
 * Create a function that maps a value to a range
 * @param  {Number}   inMin    Input range minimun value
 * @param  {Number}   inMax    Input range maximun value
 * @param  {Number}   outMin   Output range minimun value
 * @param  {Number}   outMax   Output range maximun value
 * @return {function}          A function that converts a value
 * 
 * @author Victor N. www.victorborges.com
 * @see https://gist.github.com/victornpb/51b0c17241ea483dee2c3a20d0f710eb/
 */
function createRemap(inMin, inMax, outMin, outMax) {
    return function remapper(x) {
        return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin;
    };
}

/**
 * @description Calculates the width and height of the window
 * @returns {array}  Width and height (w,h) of window
 */
function getWindowDimensions() {
  const doc = document;
  const w = window;
  // check browser compatibility
  const docEl =  (doc.compatMode && doc.compatMode === 'CSS1Compat') ? doc.documentElement : doc.body;

  let width = docEl.clientWidth;
  let height = docEl.clientHeight;

  // check mobile zoom
  if ( w.innerWidth && width > w.innerWidth ) {
    width = w.innerWidth;
    height = w.innerHeight;
  }

  return {width: width, height: height};
}

/**
 * @description Display a random heading when the page theme is changed
 */
let hIndex = 0;
function setHeadingText() {
  const h1 = document.querySelector('h1');

  const headings = [
    "Design<br>digital<br>products",
    "Build<br>human<br>brands",
    "Sharpen<br>digital<br>tools",
    "Center<br>people&apos;s<br>needs",
    "Craft<br>moving<br>stories",
  ];

  // Pick and set heading
  // let i = Math.floor(Math.random() * headings.length);
  // if ( i === hIndex ) {
  //   hIndex = (i + 1) % headings.length;
  // } else {
  //   hIndex = i;
  // }
  h1.innerHTML = headings[hIndex];
  hIndex = (hIndex + 1)%headings.length;
}

/**
* @description Changes the font size and linespacing of the heading when the space around it changes size
*/
function setHeadingSize() {
  let wDimensions = getWindowDimensions();
  const heading = document.querySelector('h1');

  // get the margins + padding of the main
  let mainStyles = window.getComputedStyle(document.querySelector('.main'));
  let margins = parseInt(bodyStyles.getPropertyValue('padding-left')) + parseInt(bodyStyles.getPropertyValue('padding-right'));

  // get the width of the bar + it's margin
  let barStyles = window.getComputedStyle(document.querySelector(".bar"));
  let barWidth = parseInt(barStyles.getPropertyValue('width')) + parseInt(barStyles.getPropertyValue('margin-right'));

  // get the height of the nav buttons
  let navStyles = window.getComputedStyle(document.querySelector('.button-group'));
  let navHeight = parseInt(navStyles.getPropertyValue('height'));

  // 'live' = available space for the heading
  let liveWidth = wDimensions.width - barWidth - margins;
  let liveHeight = wDimensions.height - margins - navHeight;

  // change the factor for font size and letter spacing
  let hReducer = heading.className === 'secondary-title'
    ? 160
    : 132;
  // console.log( hReducer );

  let fsFactor =  liveHeight > 300 
    ? Math.max(Math.min(liveWidth/hReducer, liveHeight/46), 4)
    : parseInt(heading.style.getPropertyValue('height'));
  let lsFactor = -fsFactor/16;

  // console.log( `w: ${liveWidth}; fs: ${fsFactor}; h: ${liveHeight}` );
  heading.style.setProperty('font-size', `${fsFactor}rem`);
  heading.style.setProperty('line-height', `${0.8*fsFactor}rem`);
  heading.style.setProperty('letter-spacing', `${lsFactor}rem`);
  heading.style.setProperty('transition', ``);
  // heading.style.setProperty('transition', 'font-size .1s, line-height .1s, letter-spacing .1s');
}

window.addEventListener("load", setHeadingSize, false);
window.addEventListener("resize", setHeadingSize, false);
/* LANDING PAGE */
if ( document.querySelector("#landing")) {
  let bars = document.querySelectorAll('.bar');
  for ( let i = 0; i < bars.length; i++ ) {
    bars[i].addEventListener("transitionstart", setHeadingSize, false);
    bars[i].addEventListener("transitionrun", setHeadingSize, false);
    bars[i].addEventListener("transitionend", setHeadingSize, false);
  }
}

</script>
